#!/usr/bin/python
import sys
import pydsm
import argparse

parser = argparse.ArgumentParser(description='Display TSM backup history')
parser.add_argument('--server', dest="server",
                   help='TSM server to connect to')
parser.add_argument('--format', dest="format",
                   choices=["readable", "csv"], default="readable",
                   help='format to use when displaying results')
parser.add_argument('--node', dest="node",
                   help='Name of node')

args = parser.parse_args()

d = pydsm.dsmadmc()
d.auto_open(args.server)


conditions = []
cargs = ()
if args.node is not None:
    conditions.append("node_name=%s")
    cargs = cargs + (args.node.upper(), )

if len(conditions) > 0:
    condition = "where " + " and ".join(conditions)
else:
    condition = ""

results = d.execute(
"SELECT node_name, sum(logical_mb), sum(physical_mb), sum(physical_mb)-sum(logical_mb) FROM occupancy "+condition+" GROUP BY node_name", cargs)

headers = [
    { "name": "Node", },
    { "name": "Logical (MiB)",  "justify": "right", "format": "float", "spec": "%0.1f" },
    { "name": "Physical (MiB)", "justify": "right", "format": "float", "spec": "%0.1f" },
    { "name": "Overhead (MiB)", "justify": "right", "format": "float", "spec": "%0.1f" },
]

pydsm.output_results(results, headers, args.format)

d.close()
