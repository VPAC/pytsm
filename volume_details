#!/usr/bin/python
import sys
import pydsm
import argparse

parser = argparse.ArgumentParser(description='List abbreviated contents of TSM volume')
parser.add_argument('--server', dest="server",
                   help='TSM server to connect to')
parser.add_argument('--format', dest="format",
                   choices=["readable", "csv"], default="readable",
                   help='format to use when displaying results')

group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('--stgpool', dest="stgpool",
                   help='Storage pool to list')
group.add_argument('--volume', dest="volume",
                   help='Name of volume')

args = parser.parse_args()

d = pydsm.dsmadmc()
d.auto_open(args.server)



if args.volume is not None:
    condition = "where volume_name=%s"
    cargs = (args.volume,)
elif args.stgpool is not None:
    condition = "where stgpool_name=%s"
    cargs = (args.stgpool,)
else:
    condition = ""
    cargs = None

results = d.execute(
"select volume_name,STGPOOL_NAME,EST_CAPACITY_MB,PCT_UTILIZED,EST_CAPACITY_MB*PCT_UTILIZED/100,STATUS from volumes %s order by STATUS"%condition, cargs)
result_array = []
for row in results:
    result_array.append(row)

headers = [
    { "name": "Volume", },
    { "name": "STG Pool", },
    { "name": "Capacity (MiB)", "justify": "right", "format": "float", "spec": "%0.1f"  },
    { "name": "Utilized (%)",   "justify": "right", "format": "float", "spec": "%0.1f"  },
    { "name": "Utilized (MiB)", "justify": "right", "format": "float", "spec": "%0.1f"  },
    { "name": "Status", },
]
pydsm.output_results(result_array, headers, args.format)

headers = [
    { "name": "Volume", },
    { "name": "Node", },
    { "name": "Filespace", },
]
for row in result_array:
    if isinstance(row, pydsm.Message):
        sys.stderr.write("Message: %s\n"%row)
    else:
        sys.stdout.write("\n")
        volume = row[0]
        results = d.execute(
        "select volume_name, node_name, filespace_name from volumeusage where volume_name=%s", (volume,))
        pydsm.output_results(results, headers, args.format)

d.close()
